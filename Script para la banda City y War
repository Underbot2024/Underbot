setDefaultTab("main")
-- Navegation viajar a citys
SwitchAndButton = function(params, callbackSwitch, callbackButton, callback, parent)
  --[[ params:
    on - bool,
    left - str,
    right - str,
    height - int,
    maxWidth - int,
  ]]

  params = params or {}
  params.on = params.on or false
  params.left = params.left or ""
  params.right = params.right or ""
  params.height = params.height or 20
  params.maxWidth = params.maxWidth or 88

  local widget = UI.createWidget('SwitchAndButtonPanel', parent)

  widget.left:setOn(params.on)
  widget.left:setText(params.left)
  widget.right:setText(params.right)
  widget:setHeight(params.height)
  if widget.right:getWidth() > params.maxWidth then
    widget.right:setWidth(params.maxWidth)
  end

  widget.left.onClick = function()
    params.on = not params.on
    widget.left:setOn(params.on)
    if callback then
        callback(widget, params)
    end
    if callbackSwitch then
        callbackSwitch()
    else
        warn("callback not set!")
    end
  end

  widget.right.onClick = function()
    if callbackButton then
        callbackButton()
    else
        warn("callback not set!")
    end
  end

  --[[ params:
    if type(storage.test1) ~= "table" then
        storage.test1 = storage.test1 or {on = false, left = "new script", right = "config"}
    end
    
    UI.SwitchAndButton(storage.test1, test, test, function(widget, newParams)
        storage.test1 = newParams 
    end)
  ]]
  return widget
end



if not storage["travelAnen"] then
  storage["travelAnen"] = {
    enabled = false,
    npcs = { },
    autoTravel = false
  }
end

local config = storage["travelAnen"]


g_ui.loadUIFromString([[
SwitchAndButtonPanel < Panel
  height: 20
  padding: 1

  Button
    id: right
    anchors.top: parent.top
    margin-top: 2
    anchors.bottom: parent.bottom
    anchors.right: parent.right
    text-auto-resize: true
    text-align: center

  BotSwitch
    id: left
    anchors.top: parent.top
    anchors.bottom: parent.bottom
    anchors.left: parent.left
    anchors.right: prev.left
    margin-right: 3
    text-align: center

TextListEntryTravel < UIWidget
  background-color: alpha
  text-offset: 5 1
  focusable: true
  height: 16
  font: verdana-11px-rounded
  text-align: left

  $focus:
    background-color: #00000055
  
  Button
    id: remove
    anchors.right: parent.right
    margin-right: 2
    anchors.verticalCenter: parent.verticalCenter
    size: 15 15
    margin-right: 15
    text: X
    tooltip: Remove from the list

travelAnenWindow < MainWindow
  size: 400 400
  $mobile:
    size: 400 330
  !text: tr('Lista De Navegacion')
  @onEnter: self:hide()
  @onEscape: self:hide()
  padding: 25 8 8 8

  Button
    id: btnClose
    anchors.right: parent.right
    anchors.bottom: parent.bottom
    text: Cerrar
    width: 50
    @onClick: self:getParent():hide()

  UIWidget
    text: List NPC
    anchors.top: parent.top
    anchors.left: parent.left
    anchors.right: parent.horizontalCenter
    margin-left: -40

  TextList
    id: listNPC
    anchors.top: prev.bottom
    anchors.horizontalCenter: prev.horizontalCenter
    anchors.bottom: btnClose.top
    vertical-scrollbar: listScrollbarNPC
    focusable: false
    auto-focus: first
    margin-top: 3
    width: 125

  VerticalScrollBar
    id: listScrollbarNPC
    anchors.top: prev.top
    anchors.bottom: prev.bottom
    anchors.right: prev.right
    pixels-scroll: true
    step: 5

  UIWidget
    text: List Citys
    anchors.top: parent.top
    anchors.left: prev.right
    margin-left: 10

  TextList
    id: listCitys
    anchors.top: prev.bottom
    anchors.horizontalCenter: prev.horizontalCenter
    anchors.bottom: btnClose.top
    vertical-scrollbar: listScrollbarCitys
    focusable: false
    auto-focus: first
    margin-top: 3
    margin-left: 35
    width: 125

  VerticalScrollBar
    id: listScrollbarCitys
    anchors.top: prev.top
    anchors.bottom: prev.bottom
    anchors.right: prev.right
    pixels-scroll: true
    step: 5

  Panel
    id: design
    anchors.top: parent.top
    anchors.left: prev.right
    anchors.right: parent.right
    anchors.bottom: btnClose.top
    margin-left: 10
    margin-right: 3
    layout:
      type: verticalBox
      spacing: 5
]])


local travelUI
local function createTravelUI(numColumn)
  local width = numColumn * 88 + 15
  local size = tostring(width) .. " " .. tostring(math.max(100,math.ceil(width/3.7)))
  travelUI = g_ui.getRootWidget():getChildById("travelUI")
return travelUI or g_ui.loadUIFromString([[
UIWindow
  text: Navegar Hacia
  anchors.horizontalCenter: parent.horizontalCenter
  anchors.top: parent.top
  margin-top: 30
  background-color: black
  id: travelUI
  focusable: false
  opacity: 0.85
  size: ]] .. size .. [[ 
  padding: 8
  padding-top: 18

  Panel
    id: list
    anchors.fill: parent
    layout:
      type: grid
      cell-size: 80 20
      cell-spacing: 8
      num-columns: ]] .. numColumn .. [[
]], g_ui.getRootWidget())
end


local s = {}
local parent = UI.createWindow("travelAnenWindow", g_ui.getRootWidget())
parent:hide()

local conver
local function conversation(callback, ...)
    local expressions = {...}
    local delay = 600
    local talkDelay = 0
    s.macroTraveling.setOn(false)
    for i, expr in ipairs(expressions) do
        schedule(talkDelay, function()
             if expr ~= "hi" then
               conver = callback
             end
             NPC.say(expr) 
            end)
        talkDelay = talkDelay + delay
    end
    schedule(talkDelay + delay, function()
        s.macroTraveling.setOn(s.switch.left:isOn())
       conver = nil
    end)
end

onTalk(function(name, level, mode, text, channelId)
  if conver then
    conver(name, text)
    return
  end
end)


local function travel(destination, callback)
    return conversation(callback, "hi", destination, "yes", "yes")
end

local function firstLetterCapital(texto)
    if type(texto) ~= "string" then return texto end
    return string.gsub(" "..texto, "%W%l", string.upper):sub(2)
end


local function createLabelAndEditEdit(label, idEditText, parent, tooltip)
    local w = UI.createWidget('Label', parent)
    w:setText(label)
    w:setId(label)
    w = UI.createWidget('TextEdit', parent)
    w:setTooltip(tooltip)
    w:setId(idEditText)
    return w
end

local nameNPC = createLabelAndEditEdit("Name NPC", "namenpc", parent.design)
local nameCity = createLabelAndEditEdit("Name City", "namecity", parent.design)


local function refreshList(widget, data)
    widget:destroyChildren()
    for text, _ in pairs(data or {}) do
        local w = UI.createWidget('TextListEntryTravel', widget)
        w:setText(text)
        w:setTooltip(text)
        w:setId(text)
        w.remove.onClick = function()
            local npcFocus = parent.listNPC:getFocusedChild()
            if widget:getId() == "listNPC" then
              config.npcs[w:getId()] = nil
              w:destroy()
              parent.listCitys:destroyChildren()
            else
              config.npcs[npcFocus:getId()].citys[w:getId()] = nil
              w:destroy()
            end
         

        end
    end
      widget:focusChild(nil) 
      widget:focusChild(widget:getChildByIndex(1)) 
end

parent.listNPC.onChildFocusChange =  function(widget, newChild, oldChild)
  if not newChild or not  config.npcs[newChild:getText()] then return end
  refreshList(parent.listCitys, config.npcs[newChild:getText()].citys)
  nameNPC:setText(newChild:getText())
end

refreshList(parent.listNPC, config.npcs)


local function sortCitys(citys)
  local temp = {}
  local most = 0
  for city, value in pairs(citys) do
      table.insert(temp, city)
  end
  table.sort(temp)
  return temp
end

local function getPopularOption(citys)
  local city
  local count = -1
  for town, value in pairs(citys) do
    if value > count then
      city = town
      count = value
    end
  end
  return city
end

local okButton = UI.Button("Guardar", function()
  local nameNPC = firstLetterCapital(nameNPC:getText():lower())
  local nameCity = firstLetterCapital(nameCity:getText():lower())
  
  if nameNPC == "" or nameCity == "" then
    return warn("Completa todos los campos")
  end
  
  if not config.npcs[nameNPC] then
    config.npcs[nameNPC] = {
      citys = {}
    }
  end
  config.npcs[nameNPC].citys[nameCity] = config.npcs[nameNPC].citys[nameCity] or 0
  refreshList(parent.listNPC, config.npcs)
end, parent.design)

local autoTravel = g_ui.createWidget("CheckBox", parent.design)
autoTravel:setText("Auto Navegar")
autoTravel:setTooltip("viajara automaticamente a la ciudad que visites mas con X npc")
autoTravel:setChecked(config.autoTravel)
autoTravel.onCheckChange = function(w, isOn)
    config.autoTravel = isOn
end


s.macroTraveling = macro(100, function(macro)
  local creatures = g_map.getSpectatorsInRange(pos(), false, 2, 2)
  local npc
  local citys
  for _, creature in ipairs(creatures) do
    local towns = config.npcs[creature:getName()]
    if creature:isNpc() and towns then
      npc = creature:getName()
      citys = towns.citys
      break
    end
  end
  
  if npc and citys and not travelUI then
    
    local sortList = sortCitys(citys)
    if #sortList == 0 then return end
    travelUI = createTravelUI(math.ceil(#sortList / 3))
    if config.autoTravel then
      local popular = getPopularOption(citys)
      schedule(3200, function()
        if config.enabled and travelUI and (s.actualPos and getDistanceBetween(s.actualPos, pos()) <= 6) then
          s.actualPos = nil
         travel(popular)
        end
      end)
      warn("Viajando a " .. popular .. " en 3 segundos...")
    end
    
      for _, city in ipairs(sortList) do
        local button = g_ui.createWidget("Button")
        button:setText(city)
        button.onClick = function(widget)
            local reference = config.npcs[npc]
            macro.setOn(false)
            s.actualPos = pos()
            travel(widget:getText())
            config.npcs[npc].citys[widget:getText()] = reference.citys[widget:getText()] + 1
            travelUI:destroy()
            travelUI = nil
            schedule(5000, function()
                macro.setOn(config.enabled)
            end)
        end
       
       travelUI.list:addChild(button)
      end
      travelUI:show()
      travelUI:focus()
  elseif not npc and travelUI then
      travelUI:destroy()
      travelUI = nil
  end
  
end)
s.macroTraveling.setOn(config.enabled)

s.switch = SwitchAndButton({on = config.enabled, left = "Navegacion", right = "Setup"}, function()
    config.enabled = not config.enabled
    s.macroTraveling.setOn(config.enabled)
    if not config.enabled and travelUI then
      travelUI:destroy()
      travelUI = nil
    end
end, function()
  parent:show()
  parent:focus()
  parent:raise()
end)

UI.Button("Obtener Ciudades", function()
  creatures = g_map.getSpectatorsInRange(pos(), false, 2, 2)
  for _, creature in ipairs(creatures) do
    if creature:isNpc() then
      return conversation(function(name, text)
        text = text:lower()
        if name ~= creature:getName() then return end
        if not config.npcs[name] then
          config.npcs[name] = {citys = {}}
        end
        local ok = false
        for ciudad in text:gmatch("{([%a%s]+)}") do
          if not table.find({"sail", "travel"}, ciudad) then
            config.npcs[name].citys[ciudad] = config.npcs[name].citys[ciudad] or 0
            ok = true
          end
        end
        
        if not ok then
            local options = {"to%sgo%s-%s", "go%?%sto"}
            local pos 
            for index, value in ipairs(options) do
              pos = {text:find(value)}
              if not table.empty(pos) then
                break
              end
            end

            if table.empty(pos) then return end
            ok = true
            text = text:sub(pos[2] + 1)
            text = text:gsub("%f[%w]and%f[%W]", ",")
            text = text:gsub("%f[%w]or%f[%W]", ",")
            for ciudad in string.gmatch(text, "([%w%s']+)") do
              config.npcs[name].citys[firstLetterCapital(ciudad:trim())] = config.npcs[name].citys[ciudad:trim()] or 0
            end
        end

        refreshList(parent.listNPC, config.npcs)
        end, "hi", "travel", "sail")
    end
  end
  warn("no hay npc cerca de ti")
end)

setDefaultTab("War")
-- Coloca Linea Texto Colores
local qw = UI.Label()
macro(500, function()
qw:setText("W A R")
qw:setColor("pink")
qw:setFont("verdana-11px-rounded")
schedule(600, function()
  qw:setColor("red")
end)
schedule(800, function()
  qw:setColor("yellow")
end)
schedule(1200, function()
  qw:setColor("orange")
end)
schedule(1400, function()
  qw:setColor("#00FFFF")
end)
end)

local name = UI.Label("[ [ COMBO LIDER] ]")

macro(800, function()
  local rainbowDelay = 0

  for k, color in ipairs({"#FFFF00", "#00FFFF", "#00FF00", "#87CEEB"}) do
  
    schedule(rainbowDelay, function()
      name:setColor(color)
    end)

    rainbowDelay = rainbowDelay + 300 -- Tiempo entre colores
  end
end)
-- Combo Leader
local comboOptions = {
  leader = storage.gpSpellComboLeader or "Lider del Combo",
  trigger = storage.gpSpellComboTrigger or "palabra a ver",
  spell = storage.gpSpellComboSpell or "spell a decir",
}

addLabel("leaderLabel", "Player Lider: ", comboTab)
addTextEdit("leaderValue", comboOptions.leader, function(widget, text)
  comboOptions.leader = text
  storage.gpSpellComboLeader = text
end, comboTab)

addLabel("triggerLabel", "Palabra Clave: ", comboTab)
addTextEdit("triggerValue", comboOptions.trigger, function(widget, text)
  comboOptions.trigger = text
  storage.gpSpellComboTrigger = text
end, comboTab)

addLabel("spellLabel", "Spell Combo:", comboTab)
addTextEdit("spellValue", comboOptions.spell, function(widget, text)
  comboOptions.spell = text
  storage.gpSpellComboSpell = text
end, comboTab)

onTalk(function(name, level, mode, text, channelId, pos)
  if not comboOptions.trigger then
    return
  end

  if name and name:lower() == comboOptions.leader:lower() then
    if text == comboOptions.trigger then
      say(comboOptions.spell)
    end
  end
end)

Panels.AttackItem()
Panels.AttackLeaderTarget()
-- Combo SD
if not storage.ComboUni then
    storage.ComboUni = {}
end

local settings = storage.ComboUni

settings.SDId = 3155
settings.SDEffectID = 32

local attackTarget = true
local toAttack = nil

local comboSD = macro(200, "Combo SD", function() end)

local PvpAttackLeader = {}
PvpAttackLeader.Macro = macro(50, "Lider De Target SD", function()
    if toAttack and settings.LeaderName and toAttack ~= g_game.getAttackingCreature() then
        g_game.attack(toAttack)
        toAttack = nil
    end
end)

PvpAttackLeader.editAttackLeader = UI.TextEdit(settings.LeaderName or "player name", function(widget, newText)
    settings.LeaderName = newText
end)

PvpAttackLeader.setLeader = (function(leader)
    settings.LeaderName = leader
    PvpAttackLeader.editAttackLeader:setText(leader)
end)

PvpAttackLeader.setEnabled = (function(enabled)
    if enabled then
        PvpAttackLeader.Macro:setOn()
    else
        PvpAttackLeader.Macro:setOff()
    end
end)

onMissle(function(missle)
    if not settings.LeaderName or settings.LeaderName:len() == 0 then return end
    
    local src = missle:getSource()
    if src.z ~= posz() then return end

    local from = g_map.getTile(src)
    local to = g_map.getTile(missle:getDestination())
    if not from or not to then return end

    local fromCreatures = from:getCreatures()
    local toCreatures = to:getCreatures()
    if #fromCreatures ~= 1 or #toCreatures ~= 1 then return end

    local c1 = fromCreatures[1]
    local t1 = toCreatures[1]

    if c1:getName():lower() == settings.LeaderName:lower() and missle:getId() == settings.SDEffectID then
        toAttack = t1
        if comboSD.isOn() then
            local SDRune = findItem(settings.SDId)
            if SDRune then
                return g_game.useWith(SDRune, t1)
            end
        end
    end
end)
-- Rings Custom
local s  = {}

g_ui.loadUIFromString([[
PvPScriptsScrollBar < Panel
  height: 28
  margin-top: 3

  UIWidget
    id: text
    anchors.left: parent.left
    anchors.right: parent.right
    anchors.top: parent.top
    text-align: center
    
  HorizontalScrollBar
    id: scroll
    anchors.left: parent.left
    anchors.right: parent.right
    anchors.top: prev.bottom
    margin-top: 3
    minimum: 0
    maximum: 10
    step: 1

PvPScriptsItem < Panel
  height: 40
  margin-top: 10  
  UIWidget
    id: text
    anchors.left: parent.left
    anchors.verticalCenter: next.verticalCenter

  BotItem
    id: item
    anchors.top: parent.top
    anchors.right: parent.right
    
]])

local addScrollBar = function(id, title, min, max, defaultValue, dest, tooltip)
    local widget = UI.createWidget("PvPScriptsScrollBar", dest)
    widget.text:setTooltip(tooltip)
    widget.scroll.onValueChange = function(scroll, value)
      widget.text:setText(title..value)
      if value == 0 then
        value = 1
      end
      storage[id] = value
    end
    widget.scroll:setRange(min, max)
    widget.scroll:setTooltip(tooltip)
    widget.scroll:setValue(storage[id] or defaultValue)
    widget.scroll.onValueChange(widget.scroll, widget.scroll:getValue())
end

local addItem = function(id, title, defaultItem, dest, tooltip)
    local widget = UI.createWidget('PvPScriptsItem', dest)
    widget:setId(id)
    widget.text:setText(title)
    widget.text:setTooltip(tooltip)
    widget.item:setTooltip(tooltip)
    widget.item:setItemId(storage[id] or defaultItem)
    widget.item.onItemChange = function(widget)
      storage[id] = widget:getItemId()
    end
    storage[id] = storage[id] or defaultItem
    return widget
end

addSeparator()
local name = UI.Label(" Rings Custom ")

macro(800, function()
  local rainbowDelay = 0

  for k, color in ipairs({"#FFFF00", "#00FFFF", "#00FF00", "#87CEEB"}) do
  
    schedule(rainbowDelay, function()
      name:setColor(color)
    end)

    rainbowDelay = rainbowDelay + 300 -- Tiempo entre colores
  end
end)
addSeparator()
addLabel()

addLabel("", "E-Ring"):setColor("#5DF2BD")
addScrollBar("ERingHP", "HP < ", 0, 100, 90, nil, "")
addScrollBar("ERingMP", "MP > ", 0, 100, 80, nil, "")
addItem("ERing", "normal id", storage.ERing or 3051, nil, "")
addItem("ERingEquipped", "equipped Id", storage.ERingEquipped or 3088, nil, "")

addLabel("", "Normal Ring"):setColor("yellow")
addScrollBar("NormalHP", "HP > ", 0, 100, 90, nil, "")
addScrollBar("NormalMP", "MP < ", 0, 100, 80, nil, "")
addItem("NormalRing", "normal id", storage.NormalRing or 3004, nil, "")
addItem("NormalRingEquipped", "equipped id", storage.NormalRingEquipped or 3004, nil, "")

s.equipItem = function(normalId, activeId, slot)
    local item = getInventoryItem(slot)
    if item and item:getId() == activeId then
        return false
    end
  
    if g_game.getClientVersion() >= 870 then
      g_game.equipItemId(normalId)
      return true
    end
  
    local itemToEquip = findItem(normalId)
    if itemToEquip then
        moveToSlot(itemToEquip, slot, itemToEquip:getCount())
        return true
    end
end

function crazyHPPercent()
  return (player:getHealth() / 100) * 10
end

s.m_main = macro(50, "E-Ring", function() 
  local hp = hppercent()
  local mp = manapercent()
   

  local equipEnergy = hp < storage.ERingHP and mp > storage.ERingMP
  local equipNormal = hp > storage.NormalHP and mp <= storage.NormalMP

  if equipEnergy then
      s.equipItem(storage.ERing, storage.ERingEquipped, SlotFinger)
  elseif equipNormal then
      s.equipItem(storage.NormalRing, storage.NormalRingEquipped, SlotFinger)
  end
end)

--- joyeria
function jewelleryEquip()
  panelName = "jewelleryEquipper"
 
  local ui = setupUI([[
Panel
  height: 130
  margin-top: 2

  BotItem
    id: ringId
    anchors.left: parent.left
    anchors.top: parent.top

  SmallBotSwitch
    id: ringSwitch
    anchors.left: ringId.right
    anchors.right: parent.right
    anchors.top: parent.top
    text-align: center
    text: Equip Ring
    margin-left: 3
    margin-right: 45

  SmallBotSwitch
    id: valueRing
    anchors.left: ringSwitch.right
    anchors.right: parent.right
    anchors.top: parent.top
    text-align: center
    text: Mana
    margin-left: 3
    margin-right: 0  

  BotLabel
    id: ringTitle
    anchors.left: ringId.right
    anchors.right: parent.right
    anchors.top: ringId.verticalCenter
    text-align: center

  HorizontalScrollBar
    id: ringScroll1
    anchors.left: parent.left
    anchors.right: parent.horizontalCenter
    anchors.top: ringId.bottom
    margin-right: 2
    margin-top: 2
    minimum: 0
    maximum: 100
    step: 1
    
  HorizontalScrollBar
    id: ringScroll2
    anchors.left: parent.horizontalCenter
    anchors.right: parent.right
    anchors.top: prev.top
    margin-left: 2
    minimum: 0
    maximum: 100
    step: 1
    
  BotItem
    id: ammyId
    anchors.left: parent.left
    anchors.top: ringScroll1.bottom
    margin-top: 5

  SmallBotSwitch
    id: ammySwitch
    anchors.left: ammyId.right
    anchors.right: parent.right
    anchors.top: ringScroll2.bottom
    text-align: center
    text: Equip Amulet
    margin-top: 5
    margin-left: 3
    margin-right: 45

  SmallBotSwitch
    id: valueAmmy
    anchors.left: ammySwitch.right
    anchors.right: parent.right
    anchors.top: ringScroll2.bottom
    text-align: center
    text: Mana
    margin-top: 5
    margin-left: 3

  BotLabel
    id: ammyTitle
    anchors.left: ammyId.right
    anchors.right: parent.right
    anchors.top: ammyId.verticalCenter
    text-align: center

  HorizontalScrollBar
    id: ammyScroll1
    anchors.left: parent.left
    anchors.right: parent.horizontalCenter
    anchors.top: ammyId.bottom
    margin-right: 2
    margin-top: 2
    minimum: 0
    maximum: 100
    step: 1
    
  HorizontalScrollBar
    id: ammyScroll2
    anchors.left: parent.horizontalCenter
    anchors.right: parent.right
    anchors.top: prev.top
    margin-left: 2
    minimum: 0
    maximum: 100
    step: 1

  Button
    id: resetDefault
    anchors.top: ammyScroll2.bottom
    anchors.left: parent.left
    anchors.right: parent.horizontalCenter
    margin-top: 8
    margin-left: 2
    text: Reset Default


  ]], parent)
  ui:setId(panelName)
  if not storage[panelName] or not storage[panelName].ringId or not storage[panelName].ammyId then
    storage[panelName] = {
      ringSwitch = true,
      ammySwitch = true,
      ringId = 3048,
      ammyId = 3081,
      ringMin = 30,
      ringMax = 80,
      ammyMin = 30,
      ammyMax = 80,
      valueAmmy = false,
      valueRing = false,
      ringValue = "HP",
      ammyValue = "HP"
    }
  end


  ui.ringSwitch:setOn(storage[panelName].ringEnabled)
  ui.ringSwitch.onClick = function(widget)
    storage[panelName].ringEnabled = not storage[panelName].ringEnabled
    widget:setOn(storage[panelName].ringEnabled)
  end
  ui.ammySwitch:setOn(storage[panelName].ammyEnabled)
  ui.ammySwitch.onClick = function(widget)
    storage[panelName].ammyEnabled = not storage[panelName].ammyEnabled
    widget:setOn(storage[panelName].ammyEnabled)
  end

  local updateRingText = function()
    ui.ringTitle:setText("" .. storage[panelName].ringMin .. "% <= " .. storage[panelName].ringValue .. " >= " .. storage[panelName].ringMax .. "%")  
  end
  local updateAmmyText = function()
    ui.ammyTitle:setText("" .. storage[panelName].ammyMin .. "% <= " .. storage[panelName].ammyValue .. " >= " .. storage[panelName].ammyMax .. "%")  
  end

  ui.valueRing:setOn(storage[panelName].valueRing)
  ui.valueRing.onClick = function(widget)
    storage[panelName].valueRing = not storage[panelName].valueRing
    widget:setOn(storage[panelName].valueRing)
    if storage[panelName].valueRing then
      storage[panelName].ringValue = "MP"
    else
      storage[panelName].ringValue = "HP"
    end
    updateRingText()
  end
  ui.valueAmmy:setOn(storage[panelName].valueAmmy)
  ui.valueAmmy.onClick = function(widget)
    storage[panelName].valueAmmy = not storage[panelName].valueAmmy
    widget:setOn(storage[panelName].valueAmmy)
    if storage[panelName].valueAmmy then
      storage[panelName].ammyValue = "MP"
    else
      storage[panelName].ammyValue = "HP"
    end
    updateAmmyText()
  end
 
  ui.ringScroll1.onValueChange = function(scroll, value)
    storage[panelName].ringMin = value
    updateRingText()
  end
  ui.ringScroll2.onValueChange = function(scroll, value)
    storage[panelName].ringMax = value
    updateRingText()
  end
  ui.ammyScroll1.onValueChange = function(scroll, value)
    storage[panelName].ammyMin = value
    updateAmmyText()
  end
  ui.ammyScroll2.onValueChange = function(scroll, value)
    storage[panelName].ammyMax = value
    updateAmmyText()
  end  
  ui.ringId.onItemChange = function(widget)
    storage[panelName].ringId = widget:getItemId()
  end
  ui.ammyId.onItemChange = function(widget)
    storage[panelName].ammyId = widget:getItemId()
  end

  ui.resetDefault.onClick = function(widget)
    defaultRingFind()
    defaultAmmyFind()
  end


  ui.ringScroll1:setValue(storage[panelName].ringMin)
  ui.ringScroll2:setValue(storage[panelName].ringMax)
  ui.ammyScroll1:setValue(storage[panelName].ammyMin)
  ui.ammyScroll2:setValue(storage[panelName].ammyMax)  
  ui.ringId:setItemId(storage[panelName].ringId)
  ui.ammyId:setItemId(storage[panelName].ammyId)

  local defaultRing
  local defaultAmmy
  local ringToEquip
  local ammyToEquip


  -- basic ring check
  function defaultRingFind()
    if storage[panelName].ringEnabled then
      if getFinger() and (getFinger():getId() ~= storage[panelName].ringId and getFinger():getId() ~= storage[panelName].ringId) then
        defaultRing = getFinger():getId()
      else
        defaultRing = false
      end
    end
  end
  defaultRingFind()

  -- basic amulet check
  function defaultAmmyFind()
    if storage[panelName].ammyEnabled then
      if getNeck() and (getNeck():getId() ~= storage[panelName].ammyId and getNeck():getId() ~= storage[panelName].ammyId) then
        defaultAmmy = getNeck():getId()
      else
        defaultAmmy = false
      end
    end
  end
  defaultAmmyFind()

  macro(20, function()
    ammyToEquip = findItem(storage[panelName].ammyId)
    ringToEquip = findItem(storage[panelName].ringId)

    -- basic conditions to met 
    if not storage[panelName].ringEnabled and not storage[panelName].ammyEnabled then return end
    if not storage[panelName].ringEnabled and storage[panelName].ammyEnabled and not ammyToEquip and (not getNeck() or (getNeck():getId() ~= storage[panelName].ammyId and getNeck():getId() ~= storage[panelName].ammyId)) then return end
    if storage[panelName].ringEnabled and not storage[panelName].ammyEnabled and not ringToEquip and (not getFinger() or (getFinger():getId() ~= storage[panelName].ringId and getFinger():getId() ~= storage[panelName].ringId)) then return end

    -- ring unequip conditions
    if storage[panelName].ringEnabled and getFinger() and
      getFinger():getId() == storage[panelName].ringId and
      ((not storage[panelName].valueRing and
        (hppercent() > storage[panelName].ringMax or
        hppercent() < storage[panelName].ringMin)) or
      (storage[panelName].valueRing and
        (manapercent() > storage[panelName].ringMax or
        manapercent() < storage[panelName].ringMin)))
    then
      if defaultRing then
        moveToSlot(findItem(defaultRing), SlotFinger, 1)
      else
        for _,container in pairs(getContainers()) do
          g_game.move(getFinger(), container:getSlotPosition(container:getItemsCount()))
          return
        end
      end
      delay(200)
    end

    -- amulet unequip conditions
    if storage[panelName].ammyEnabled and
      getNeck() and getNeck():getId() == storage[panelName].ammyId and
      ((not storage[panelName].valueAmmy and
        (hppercent() > storage[panelName].ammyMax or
        hppercent() < storage[panelName].ammyMin)) or
      (storage[panelName].valueAmmy and
        (manapercent() > storage[panelName].ammyMax or
        manapercent() < storage[panelName].ammyMin)))
    then
      if defaultAmmy then
        moveToSlot(findItem(defaultAmmy), SlotNeck, 1)
      else
        for _,container in pairs(getContainers()) do
          g_game.move(getNeck(), container:getSlotPosition(container:getItemsCount()))
          return
        end
      end
      delay(200)
    end

    -- ring equip conditions
    if storage[panelName].ringEnabled and
      (not getFinger() or getFinger():getId() ~= storage[panelName].ringId) and
      not isInPz() and
      ((not storage[panelName].valueRing and
        hppercent() <= storage[panelName].ringMax and
        hppercent() >= storage[panelName].ringMin) or
      (storage[panelName].valueRing and
        manapercent() <= storage[panelName].ringMax and
        manapercent() >= storage[panelName].ringMin))
    then
      moveToSlot(ringToEquip, SlotFinger, 1)
      delay(200)

    end
    -- amulet equip conditions
    if storage[panelName].ammyEnabled and
      (not getNeck() or getNeck():getId() ~= storage[panelName].ammyId) and
      not isInPz() and
      ((not storage[panelName].valueAmmy and
        hppercent() <= storage[panelName].ammyMax and
        hppercent() >= storage[panelName].ammyMin) or
      (storage[panelName].valueAmmy and
        manapercent() <= storage[panelName].ammyMax and
        manapercent() >= storage[panelName].ammyMin))
    then
        moveToSlot(ammyToEquip, SlotNeck, 1)
        delay(200)

    end
  end)
  -- end of function
end
addSeparator()
UI.Label("Equipar Joyeria")
jewelleryEquip()
addSeparator()

--- Equip
local scripts = 2 -- if you want more auto equip panels you can change 2 to higher value

UI.Label("Auto equip")
if type(storage.autoEquip) ~= "table" then
  storage.autoEquip = {}
end
for i=1,scripts do
  if not storage.autoEquip[i] then
    storage.autoEquip[i] = {on=false, title="Auto Equip", item1=i == 1 and 3052 or 0, item2=i == 1 and 3089 or 0, slot=i == 1 and 9 or 0}
  end
  UI.TwoItemsAndSlotPanel(storage.autoEquip[i], function(widget, newParams)
    storage.autoEquip[i] = newParams
  end)
end
macro(250, function()
  local containers = g_game.getContainers()
  for index, autoEquip in ipairs(storage.autoEquip) do
    if autoEquip.on then
      local slotItem = getSlot(autoEquip.slot)
      if not slotItem or (slotItem:getId() ~= autoEquip.item1 and slotItem:getId() ~= autoEquip.item2) then
        for _, container in pairs(containers) do
          for __, item in ipairs(container:getItems()) do
            if item:getId() == autoEquip.item1 or item:getId() == autoEquip.item2 then
              g_game.move(item, {x=65535, y=autoEquip.slot, z=0}, item:getCount())
              delay(1000) -- don't call it too often      
              return
            end
          end
        end
      end
    end
  end
end)
