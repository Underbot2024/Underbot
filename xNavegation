SwitchAndButton = function(params, callbackSwitch, callbackButton, callback, parent)
  --[[ params:
    on - bool,
    left - str,
    right - str,
    height - int,
    maxWidth - int,
  ]]

  params = params or {}
  params.on = params.on or false
  params.left = params.left or ""
  params.right = params.right or ""
  params.height = params.height or 20
  params.maxWidth = params.maxWidth or 88

  local widget = UI.createWidget('SwitchAndButtonPanel', parent)

  widget.left:setOn(params.on)
  widget.left:setText(params.left)
  widget.right:setText(params.right)
  widget:setHeight(params.height)
  if widget.right:getWidth() > params.maxWidth then
    widget.right:setWidth(params.maxWidth)
  end

  widget.left.onClick = function()
    params.on = not params.on
    widget.left:setOn(params.on)
    if callback then
        callback(widget, params)
    end
    if callbackSwitch then
        callbackSwitch()
    else
        warn("callback not set!")
    end
  end

  widget.right.onClick = function()
    if callbackButton then
        callbackButton()
    else
        warn("callback not set!")
    end
  end

  --[[ params:
    if type(storage.test1) ~= "table" then
        storage.test1 = storage.test1 or {on = false, left = "new script", right = "config"}
    end
    
    UI.SwitchAndButton(storage.test1, test, test, function(widget, newParams)
        storage.test1 = newParams 
    end)
  ]]
  return widget
end



if not storage["travelAnen"] then
  storage["travelAnen"] = {
    enabled = false,
    npcs = { },
    autoTravel = false
  }
end

local config = storage["travelAnen"]


g_ui.loadUIFromString([[
SwitchAndButtonPanel < Panel
  height: 20
  padding: 1

  Button
    id: right
    anchors.top: parent.top
    margin-top: 2
    anchors.bottom: parent.bottom
    anchors.right: parent.right
    text-auto-resize: true
    text-align: center

  BotSwitch
    id: left
    anchors.top: parent.top
    anchors.bottom: parent.bottom
    anchors.left: parent.left
    anchors.right: prev.left
    margin-right: 3
    text-align: center

TextListEntryTravel < UIWidget
  background-color: alpha
  text-offset: 5 1
  focusable: true
  height: 16
  font: verdana-11px-rounded
  text-align: left

  $focus:
    background-color: #00000055
  
  Button
    id: remove
    anchors.right: parent.right
    margin-right: 2
    anchors.verticalCenter: parent.verticalCenter
    size: 15 15
    margin-right: 15
    text: X
    tooltip: Remove from the list

travelAnenWindow < MainWindow
  size: 400 400
  $mobile:
    size: 400 330
  !text: tr('Lista De Navegacion')
  @onEnter: self:hide()
  @onEscape: self:hide()
  padding: 25 8 8 8

  Button
    id: btnClose
    anchors.right: parent.right
    anchors.bottom: parent.bottom
    text: Cerrar
    width: 50
    @onClick: self:getParent():hide()

  UIWidget
    text: List NPC
    anchors.top: parent.top
    anchors.left: parent.left
    anchors.right: parent.horizontalCenter
    margin-left: -40

  TextList
    id: listNPC
    anchors.top: prev.bottom
    anchors.horizontalCenter: prev.horizontalCenter
    anchors.bottom: btnClose.top
    vertical-scrollbar: listScrollbarNPC
    focusable: false
    auto-focus: first
    margin-top: 3
    width: 125

  VerticalScrollBar
    id: listScrollbarNPC
    anchors.top: prev.top
    anchors.bottom: prev.bottom
    anchors.right: prev.right
    pixels-scroll: true
    step: 5

  UIWidget
    text: List Citys
    anchors.top: parent.top
    anchors.left: prev.right
    margin-left: 10

  TextList
    id: listCitys
    anchors.top: prev.bottom
    anchors.horizontalCenter: prev.horizontalCenter
    anchors.bottom: btnClose.top
    vertical-scrollbar: listScrollbarCitys
    focusable: false
    auto-focus: first
    margin-top: 3
    margin-left: 35
    width: 125

  VerticalScrollBar
    id: listScrollbarCitys
    anchors.top: prev.top
    anchors.bottom: prev.bottom
    anchors.right: prev.right
    pixels-scroll: true
    step: 5

  Panel
    id: design
    anchors.top: parent.top
    anchors.left: prev.right
    anchors.right: parent.right
    anchors.bottom: btnClose.top
    margin-left: 10
    margin-right: 3
    layout:
      type: verticalBox
      spacing: 5
]])


local travelUI
local function createTravelUI(numColumn)
  local width = numColumn * 88 + 15
  local size = tostring(width) .. " " .. tostring(math.max(100,math.ceil(width/3.7)))
  travelUI = g_ui.getRootWidget():getChildById("travelUI")
return travelUI or g_ui.loadUIFromString([[
UIWindow
  text: Navegar Hacia
  anchors.horizontalCenter: parent.horizontalCenter
  anchors.top: parent.top
  margin-top: 30
  background-color: black
  id: travelUI
  focusable: false
  opacity: 0.85
  size: ]] .. size .. [[ 
  padding: 8
  padding-top: 18

  Panel
    id: list
    anchors.fill: parent
    layout:
      type: grid
      cell-size: 80 20
      cell-spacing: 8
      num-columns: ]] .. numColumn .. [[
]], g_ui.getRootWidget())
end


local s = {}
local parent = UI.createWindow("travelAnenWindow", g_ui.getRootWidget())
parent:hide()

local conver
local function conversation(callback, ...)
    local expressions = {...}
    local delay = 600
    local talkDelay = 0
    s.macroTraveling.setOn(false)
    for i, expr in ipairs(expressions) do
        schedule(talkDelay, function()
             if expr ~= "hi" then
               conver = callback
             end
             NPC.say(expr) 
            end)
        talkDelay = talkDelay + delay
    end
    schedule(talkDelay + delay, function()
        s.macroTraveling.setOn(s.switch.left:isOn())
       conver = nil
    end)
end

onTalk(function(name, level, mode, text, channelId)
  if conver then
    conver(name, text)
    return
  end
end)


local function travel(destination, callback)
    return conversation(callback, "hi", destination, "yes", "yes")
end

local function firstLetterCapital(texto)
    if type(texto) ~= "string" then return texto end
    return string.gsub(" "..texto, "%W%l", string.upper):sub(2)
end


local function createLabelAndEditEdit(label, idEditText, parent, tooltip)
    local w = UI.createWidget('Label', parent)
    w:setText(label)
    w:setId(label)
    w = UI.createWidget('TextEdit', parent)
    w:setTooltip(tooltip)
    w:setId(idEditText)
    return w
end

local nameNPC = createLabelAndEditEdit("Name NPC", "namenpc", parent.design)
local nameCity = createLabelAndEditEdit("Name City", "namecity", parent.design)


local function refreshList(widget, data)
    widget:destroyChildren()
    for text, _ in pairs(data or {}) do
        local w = UI.createWidget('TextListEntryTravel', widget)
        w:setText(text)
        w:setTooltip(text)
        w:setId(text)
        w.remove.onClick = function()
            local npcFocus = parent.listNPC:getFocusedChild()
            if widget:getId() == "listNPC" then
              config.npcs[w:getId()] = nil
              w:destroy()
              parent.listCitys:destroyChildren()
            else
              config.npcs[npcFocus:getId()].citys[w:getId()] = nil
              w:destroy()
            end
         

        end
    end
      widget:focusChild(nil) 
      widget:focusChild(widget:getChildByIndex(1)) 
end

parent.listNPC.onChildFocusChange =  function(widget, newChild, oldChild)
  if not newChild or not  config.npcs[newChild:getText()] then return end
  refreshList(parent.listCitys, config.npcs[newChild:getText()].citys)
  nameNPC:setText(newChild:getText())
end

refreshList(parent.listNPC, config.npcs)


local function sortCitys(citys)
  local temp = {}
  local most = 0
  for city, value in pairs(citys) do
      table.insert(temp, city)
  end
  table.sort(temp)
  return temp
end

local function getPopularOption(citys)
  local city
  local count = -1
  for town, value in pairs(citys) do
    if value > count then
      city = town
      count = value
    end
  end
  return city
end

local okButton = UI.Button("Guardar", function()
  local nameNPC = firstLetterCapital(nameNPC:getText():lower())
  local nameCity = firstLetterCapital(nameCity:getText():lower())
  
  if nameNPC == "" or nameCity == "" then
    return warn("Completa todos los campos")
  end
  
  if not config.npcs[nameNPC] then
    config.npcs[nameNPC] = {
      citys = {}
    }
  end
  config.npcs[nameNPC].citys[nameCity] = config.npcs[nameNPC].citys[nameCity] or 0
  refreshList(parent.listNPC, config.npcs)
end, parent.design)

local autoTravel = g_ui.createWidget("CheckBox", parent.design)
autoTravel:setText("Auto Navegar")
autoTravel:setTooltip("viajara automaticamente a la ciudad que visites mas con X npc")
autoTravel:setChecked(config.autoTravel)
autoTravel.onCheckChange = function(w, isOn)
    config.autoTravel = isOn
end


s.macroTraveling = macro(100, function(macro)
  local creatures = g_map.getSpectatorsInRange(pos(), false, 2, 2)
  local npc
  local citys
  for _, creature in ipairs(creatures) do
    local towns = config.npcs[creature:getName()]
    if creature:isNpc() and towns then
      npc = creature:getName()
      citys = towns.citys
      break
    end
  end
  
  if npc and citys and not travelUI then
    
    local sortList = sortCitys(citys)
    if #sortList == 0 then return end
    travelUI = createTravelUI(math.ceil(#sortList / 3))
    if config.autoTravel then
      local popular = getPopularOption(citys)
      schedule(3200, function()
        if config.enabled and travelUI and (s.actualPos and getDistanceBetween(s.actualPos, pos()) <= 6) then
          s.actualPos = nil
         travel(popular)
        end
      end)
      warn("Viajando a " .. popular .. " en 3 segundos...")
    end
    
      for _, city in ipairs(sortList) do
        local button = g_ui.createWidget("Button")
        button:setText(city)
        button.onClick = function(widget)
            local reference = config.npcs[npc]
            macro.setOn(false)
            s.actualPos = pos()
            travel(widget:getText())
            config.npcs[npc].citys[widget:getText()] = reference.citys[widget:getText()] + 1
            travelUI:destroy()
            travelUI = nil
            schedule(5000, function()
                macro.setOn(config.enabled)
            end)
        end
       
       travelUI.list:addChild(button)
      end
      travelUI:show()
      travelUI:focus()
  elseif not npc and travelUI then
      travelUI:destroy()
      travelUI = nil
  end
  
end)
s.macroTraveling.setOn(config.enabled)

s.switch = SwitchAndButton({on = config.enabled, left = "Navegacion", right = "Setup"}, function()
    config.enabled = not config.enabled
    s.macroTraveling.setOn(config.enabled)
    if not config.enabled and travelUI then
      travelUI:destroy()
      travelUI = nil
    end
end, function()
  parent:show()
  parent:focus()
  parent:raise()
end)

UI.Button("Obtener Ciudades", function()
  creatures = g_map.getSpectatorsInRange(pos(), false, 2, 2)
  for _, creature in ipairs(creatures) do
    if creature:isNpc() then
      return conversation(function(name, text)
        text = text:lower()
        if name ~= creature:getName() then return end
        if not config.npcs[name] then
          config.npcs[name] = {citys = {}}
        end
        local ok = false
        for ciudad in text:gmatch("{([%a%s]+)}") do
          if not table.find({"sail", "travel"}, ciudad) then
            config.npcs[name].citys[ciudad] = config.npcs[name].citys[ciudad] or 0
            ok = true
          end
        end
        
        if not ok then
            local options = {"to%sgo%s-%s", "go%?%sto"}
            local pos 
            for index, value in ipairs(options) do
              pos = {text:find(value)}
              if not table.empty(pos) then
                break
              end
            end

            if table.empty(pos) then return end
            ok = true
            text = text:sub(pos[2] + 1)
            text = text:gsub("%f[%w]and%f[%W]", ",")
            text = text:gsub("%f[%w]or%f[%W]", ",")
            for ciudad in string.gmatch(text, "([%w%s']+)") do
              config.npcs[name].citys[firstLetterCapital(ciudad:trim())] = config.npcs[name].citys[ciudad:trim()] or 0
            end
        end

        refreshList(parent.listNPC, config.npcs)
        end, "hi", "travel", "sail")
    end
  end
  warn("no hay npc cerca de ti")
end)
