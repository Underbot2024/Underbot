setDefaultTab("Main")

local ui = setupUI([[
Panel
  height: 19

  BotSwitch
    id: title
    anchors.top: parent.top
    anchors.left: parent.left
    text-align: center
    width: 130
    !text: tr('Tirar Items')

  Button
    id: edit
    anchors.top: prev.top
    anchors.left: prev.right
    anchors.right: parent.right
    margin-left: 3
    height: 17
    text: Edit
]])

local edit = setupUI([[
Panel
  height: 150
    
  Label
    anchors.top: parent.top
    anchors.left: parent.left
    anchors.right: parent.right
    margin-top: 5
    text-align: center
    text: Trash:

  BotContainer
    id: TrashItems
    anchors.top: prev.bottom
    anchors.left: parent.left
    anchors.right: parent.right
    height: 32

  Label
    anchors.top: prev.bottom
    margin-top: 5
    anchors.left: parent.left
    anchors.right: parent.right
    text-align: center
    text: Use:

  BotContainer
    id: UseItems
    anchors.top: prev.bottom
    anchors.left: parent.left
    anchors.right: parent.right
    height: 32

  Label
    anchors.top: prev.bottom
    margin-top: 5
    anchors.left: parent.left
    anchors.right: parent.right
    text-align: center
    text: Drop if below 150 cap:

  BotContainer
    id: CapItems
    anchors.top: prev.bottom
    anchors.left: parent.left
    anchors.right: parent.right
    height: 32   
]])
edit:hide()

if not storage.dropper then
    storage.dropper = {
      enabled = false,
      trashItems = { 283, 284, 285 },
      useItems = { 21203, 14758 },
      capItems = { 21175 }
    }
end

local config = storage.dropper

local showEdit = false
ui.edit.onClick = function(widget)
  showEdit = not showEdit
  if showEdit then
    edit:show()
  else
    edit:hide()
  end
end

ui.title:setOn(config.enabled)
ui.title.onClick = function(widget)
  config.enabled = not config.enabled
  ui.title:setOn(config.enabled)
end

UI.Container(function()
    config.trashItems = edit.TrashItems:getItems()
    end, true, nil, edit.TrashItems) 
edit.TrashItems:setItems(config.trashItems)

UI.Container(function()
    config.useItems = edit.UseItems:getItems()
    end, true, nil, edit.UseItems) 
edit.UseItems:setItems(config.useItems)

UI.Container(function()
    config.capItems = edit.CapItems:getItems()
    end, true, nil, edit.CapItems) 
edit.CapItems:setItems(config.capItems)

local function properTable(t)
    local r = {}
  
    for _, entry in pairs(t) do
      table.insert(r, entry.id)
    end
    return r
end

macro(200, function()
    if not config.enabled then return end
    local tables = {properTable(config.capItems), properTable(config.useItems), properTable(config.trashItems)}

    local containers = getContainers()
    for i=1,3 do
        for _, container in pairs(containers) do
            for __, item in ipairs(container:getItems()) do
                for ___, userItem in ipairs(tables[i]) do
                    if item:getId() == userItem then
                        return i == 1 and freecap() < 150 and g_game.move(item, pos(), item:getCount()) or
                               i == 2 and use(item) or
                               g_game.move(item, pos(), item:getCount())
                    end
                end
            end
        end
    end
end)

-- Targetwall
itemWidget = [[
Panel
  height: 34
  margin-top: 7
  margin-left: 25
  margin-right: 25

  UIWidget
    id: text
    anchors.left: parent.left
    anchors.verticalCenter: next.verticalCenter

  BotItem
    id: item
    anchors.top: parent.top
    anchors.right: parent.right
]]

storage.itemValues = storage.itemValues or {};
addItem = function(id, title, defaultItem, dest, tooltip)
    local widget = setupUI(itemWidget, dest)
    widget.text:setText(title)
    widget.text:setTooltip(tooltip)
    widget.item:setTooltip(tooltip)
    widget.item:setItemId(storage.itemValues[id] or defaultItem)
    widget.item.onItemChange = function(widget)
        storage.itemValues[id] = widget:getItemId()
    end
    storage.itemValues[id] = storage.itemValues[id] or defaultItem
end

addItem('mwallId', 'MW ID' , 3180, ToolsTab, '');

local offsetDirections = {
    [North] = { 0, -2 },
    [East] = { 2, 0 },
    [South] = { 0, 2 },
    [West] = { -2, 0 },
    [NorthEast] = { 2, -2 },
    [SouthEast] = { 2, 2 },
    [SouthWest] = { -2, 2 },
    [NorthWest] = { -2, -2 }
}


local twallMacro = macro(10, "Mwall Frente Target", function()
    local target = g_game.getAttackingCreature()
    if not target then
        return
    end

    local targetPos = target:getPosition()
    local targetDir = target:getDirection()

    targetPos.x = targetPos.x + offsetDirections[targetDir][1]
    targetPos.y = targetPos.y + offsetDirections[targetDir][2]
    
    local mwallTile = g_map.getTile(targetPos)
    useWith(storage.itemValues.mwallId, mwallTile:getTopUseThing())
end, ToolsTab)

local function activeDrag(icon, nameMacro, position)
  icon:breakAnchors()
  icon:move(position.posX or 20, position.posY or 20)

  local dobleclick = false
  icon.onDoubleClick = function()
    dobleclick = true
    schedule(1500, function()
      dobleclick = false
    end)
  end

  icon.onDragEnter = function(widget, mousePos)
    if not dobleclick and not g_keyboard.isKeyPressed("F1") then
      return false
    end
    icon:breakAnchors()
    icon.movingReference = { x = mousePos.x - icon:getX(), y = mousePos.y - icon:getY() }
    dobleclick = false
    return true
  end

  icon.onDragMove = function(widget, mousePos, moved)
    local parentRect = widget:getParent():getRect()
    local x = math.min(math.max(0,mousePos.x - widget.movingReference.x), parentRect.x + parentRect.width - widget:getWidth())
    local y = math.min(math.max(0,mousePos.y - widget.movingReference.y), parentRect.y + parentRect.height - widget:getHeight())
    widget:move(x, y)
    icon.moving = { x = icon:getX(), y = icon:getY() }
    return true
  end

  icon.onDragLeave = function(widget, pos)
    storage[nameMacro] = { posX = icon.moving.x, posY = icon.moving.y }
  end
end

local twallIcon = addIcon("twall", {item = 8650, text = "Wall Target", switchable = true, moveable = true}, function(icon, isOn)
  twallMacro.setOn(isOn)
end)

twallIcon.text:setFont('verdana-11px-rounded')

activeDrag(twallIcon, 'twall', storage.twall or {})

-- move and wall
local exhausted = 1000
local mwID = 3180

local attack
local movewallMacro = macro(10, "Target Move & Wall", function() 
    attack = g_game.getAttackingCreature()
end)

local lastMW = 0
onCreaturePositionChange(function(creature, newPos, oldPos)
  if movewallMacro:isOff() or not attack or creature ~= attack or not oldPos or now - lastMW < exhausted  then return end
  local mwallTile = g_map.getTile(oldPos)
  useWith(mwID, mwallTile:getTopUseThing())
lastMW = now
end)

local function activeDrag(icon, nameMacro, position)
  icon:breakAnchors()
  icon:move(position.posX or 20, position.posY or 20)

  local dobleclick = false
  icon.onDoubleClick = function()
    dobleclick = true
    schedule(1500, function()
      dobleclick = false
    end)
  end

  icon.onDragEnter = function(widget, mousePos)
    if not dobleclick and not g_keyboard.isKeyPressed("F1") then
      return false
    end
    icon:breakAnchors()
    icon.movingReference = { x = mousePos.x - icon:getX(), y = mousePos.y - icon:getY() }
    dobleclick = false
    return true
  end

  icon.onDragMove = function(widget, mousePos, moved)
    local parentRect = widget:getParent():getRect()
    local x = math.min(math.max(0,mousePos.x - widget.movingReference.x), parentRect.x + parentRect.width - widget:getWidth())
    local y = math.min(math.max(0,mousePos.y - widget.movingReference.y), parentRect.y + parentRect.height - widget:getHeight())
    widget:move(x, y)
    icon.moving = { x = icon:getX(), y = icon:getY() }
    return true
  end

  icon.onDragLeave = function(widget, pos)
    storage[nameMacro] = { posX = icon.moving.x, posY = icon.moving.y }
  end
end

local movewallIcon = addIcon("movewall", {item = 9379, text = "Move Wall", switchable = true, moveable = true}, function(icon, isOn)
  movewallMacro.setOn(isOn)
end)

movewallIcon.text:setFont('verdana-11px-rounded')

activeDrag(movewallIcon, 'movewall', storage.movewall or {})

-- Push Final
-- DESTROY FIELD
local destroy = {
  id = 3148,
  fields = {2118, 2122, 105, 2123, 2124, 2121, 2126, 2119},
  icon_pos = {275,330},
  text = "Destroy",
}
-- MAGIC WALL
local mw = {
  id = 3180,
  icon_pos = {325,330},
  text = "Push Mwall"
}
-- FIRE FIELD // main icon
local ff = {
  id = 8646,
  text = "Push Player",
}
-- throw rune delay
local ex = 250
-- END CONFIG


-- destroy
local destroyMacro = macro(500,function() end)
local destroyIcon = addIcon("destroyIcon",{movable=true, text=destroy.text, item=destroy.id}, destroyMacro)

destroyIcon.onDragEnter = function(widget, mousePos)
  if not g_keyboard.isKeyPressed("F1") then
	return false
  end
  widget:breakAnchors()
  widget.movingReference = { x = mousePos.x - widget:getX(), y = mousePos.y - widget:getY() }
  return true
 end

destroyIcon.text:setFont('verdana-11px-rounded')
-- mw
local mwMacro = macro(700,function() end)
local mwIcon = addIcon("mwIcon",{movable=true, text=mw.text, item=mw.id}, mwMacro)

mwIcon.onDragEnter = function(widget, mousePos)
  if not g_keyboard.isKeyPressed("F1") then
	return false
  end
  widget:breakAnchors()
  widget.movingReference = { x = mousePos.x - widget:getX(), y = mousePos.y - widget:getY() }
  return true
 end

mwIcon.text:setFont('verdana-11px-rounded')

-- push settings

-- Storage
local stName = "PushIcons"
storage[stName] = storage[stName] or {
  sEx = 700,
  sIPX = 170,
  sIPY = 250,
  sRune = 3172
}

local config = storage[stName]

-- UI
local main = setupUI([[
Panel
  height: 19

  Button
    id: edit
    anchors.top: parent.top
    anchors.left: parent.left
    text-align: center
    margin-top: 1
    width: 176
    height: 17
    !text: tr('Push Target')
    font: verdana-11px-rounded
    color: red
]])

local edit = setupUI([[
PushIconsBox < CheckBox
  font: verdana-11px-rounded
  margin-top: 5
  margin-left: 5
  anchors.top: prev.bottom
  anchors.left: parent.left
  anchors.right: parent.right
  color: lightGray

PushIconsText < BotTextEdit
  width: 80
  anchors.top: prev.bottom
  anchors.right: parent.right
  font: verdana-11px-rounded
  margin-top: 5

PushIconsLabel < Label
  font: verdana-11px-rounded
  anchors.left: parent.left
  margin-left: 5
  anchors.verticalCenter: prev.verticalCenter
  
Panel
  height: 123

  PushIconsText
    id: sIPX
    anchors.top: parent.top

  PushIconsLabel
    text: Icon Position X:

  PushIconsText
    id: sIPY

  PushIconsLabel
    text: Icon Position Y:

  PushIconsText
    id: sEx

  PushIconsLabel
    text: Push Delay:

  PushIconsText
    id: sRune

  PushIconsLabel
    text: Fire Field ID:
]])
edit:hide()

-- UI Functions
local showEdit = true
main.edit.onClick = function()
  showEdit = not showEdit
  if showEdit then edit:show()
  else edit:hide()
  end
end

edit.sIPX:setText(config.sIPX)
edit.sIPX.onTextChange = function(widget, text)
  config.sIPX = text
end
edit.sIPX:setTooltip("Need Restart to Change.")

edit.sIPY:setText(config.sIPY)
edit.sIPY.onTextChange = function(widget, text)
  config.sIPY = text
end
edit.sIPY:setTooltip("Need Restart to Change.")

edit.sEx:setText(config.sEx)
edit.sEx.onTextChange = function(widget, text)
  config.sEx = text
end

edit.sRune:setText(config.sRune)
edit.sRune.onTextChange = function(widget, text)
  config.sRune = text
end

--- End of UI

-- Base Icon Position
local x,y = config.sIPX, config.sIPY
-- Icon Config
local iConf = {
  step = 43, -- distance from each icon
  itemOn = 8649,
  itemOff = 8647,
}

-- Directions
local offsetDirections = {
  [North]      = {x =  0, y = -1, enabled = false, icon = nil},
  [East]       = {x =  1, y =  0, enabled = false, icon = nil},
  [South]      = {x =  0, y =  1, enabled = false, icon = nil},
  [West]       = {x = -1, y =  0, enabled = false, icon = nil},
  [NorthEast]  = {x =  1, y = -1, enabled = false, icon = nil},
  [SouthEast]  = {x =  1, y =  1, enabled = false, icon = nil},
  [SouthWest]  = {x = -1, y =  1, enabled = false, icon = nil},
  [NorthWest]  = {x = -1, y = -1, enabled = false, icon = nil},
}

-- Positions Icons
for e, entry in pairs(offsetDirections) do
  entry.icon = addIcon("icon"..e,{item=iConf.itemOff, movable=false, text=""}, function(w,on)
    w.item:setItemId(on and iConf.itemOn or iConf.itemOff)
    for o, off in pairs(offsetDirections) do
      if o ~= e then
        if off.enabled then off.icon:onClick() end
      end
    end
    entry.enabled = on
  end)
  
  entry.icon:breakAnchors()
  entry.icon:move(x+(entry.x * iConf.step), y+(entry.y * iConf.step))
  entry.icon:hide()
  entry.icon:setSize({height=iConf.step,width=iConf.step})
end

-- Main Loop
local pushTarget = macro(50,function(m)
  local target = nil
  if g_game.isAttacking() then
    target = g_game.getAttackingCreature()
  elseif g_game.isFollowing() then
    target = g_game.getFollowingCreature()
  end
  if not target then return end
  for e, entry in pairs(offsetDirections) do
    if entry.enabled then
      local pos = target:getPosition()
      local tile = g_map.getTile(pos)
      if tile then
        local top = tile:getTopUseThing()
        if top and not top:isNotMoveable() then
          useWith(config.sRune,top)
          print("FF")
          return delay(ex)
        end
      end
      pos.x, pos.y = pos.x + entry.x, pos.y + entry.y
      local newTile = g_map.getTile(pos)
      if newTile then
        if destroyMacro:isOn() then
          for i, item in ipairs(newTile:getItems()) do
            if table.find(destroy.fields,item:getId()) then
              useWith(destroy.id,newTile:getTopThing())
              print("DESTR")
              return delay(ex)
            end
          end
        end
        if newTile:isWalkable() then
          print("move?")
          g_game.move(target,pos)
          delay(config.sEx)
          if mwMacro:isOn() then
            schedule(config.sEx,function()
              print("MW")
              useWith(3180,tile:getTopUseThing())
            end)
            delay(config.sEx + ex)
          end
        end
      end
    end
  end
end)

-- Central Icon
local mainIcon = addIcon("MainIcon",{movable=true, text=ff.text, item=ff.id}, function(w, isOn)
   for e, entry in pairs(offsetDirections) do
      entry.icon:setVisible(isOn)
    end
    pushTarget.setOn(isOn)
    destroyIcon:setVisible(isOn)
    mwIcon:setVisible(isOn)
end)
mainIcon:move(225,385)

mainIcon.onDragEnter = function(widget, mousePos)
  if not g_keyboard.isKeyPressed("F1") then
	return false
  end
  widget:breakAnchors()
  widget.movingReference = { x = mousePos.x - widget:getX(), y = mousePos.y - widget:getY() }
  return true
 end

mainIcon:setSize({height=iConf.step,width=iConf.step})
mainIcon.text:setFont('verdana-11px-rounded')
