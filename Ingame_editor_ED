setDefaultTab("Tools")
-- Coloca Linea Texto Colores
local qw = UI.Label()
macro(500, function()
qw:setText("T O O L S")
qw:setColor("pink")
qw:setFont("verdana-11px-rounded")
schedule(600, function()
  qw:setColor("red")
end)
schedule(800, function()
  qw:setColor("yellow")
end)
schedule(1200, function()
  qw:setColor("orange")
end)
schedule(1400, function()
  qw:setColor("#00FFFF")
end)
end)

-- Girar Script creado por Madgenius
local actionUI = setupUI([[
Panel
  height: 12

  Button
    id: editPlayerList
    anchors.top: parent.top
    anchors.left: parent.left
    anchors.right: parent.right
    margin-left: 1
    height: 18
    text: Girar Hacia :
]], parent)

g_ui.loadUIFromString([[
ActionWindow < MainWindow
  text: Rotacion
  size: 130 190
  
  Button
    id: northButton
    text: UP
    anchors.top: parent.top
    anchors.left: parent.left
    anchors.right: parent.right
    margin-top: 3
    margin-left: 3
    margin-right: 3
    height: 24
    font: verdana-11px-rounded

  Button
    id: eastButton
    text: RIGHT
    anchors.top: prev.bottom
    anchors.left: parent.left
    anchors.right: parent.right
    margin-top: 3
    margin-left: 3
    margin-right: 3
    height: 24
    font: verdana-11px-rounded

  Button
    id: westButton
    text: LEFT
    anchors.top: prev.bottom
    anchors.left: parent.left
    anchors.right: parent.right
    margin-top: 3
    margin-left: 3
    margin-right: 3
    height: 24
    font: verdana-11px-rounded

  Button
    id: southButton
    text: SUR
    anchors.top: prev.bottom
    anchors.left: parent.left
    anchors.right: parent.right
    margin-top: 3
    margin-left: 3
    margin-right: 3
    height: 24
    font: verdana-11px-rounded

  HorizontalSeparator
    id: separator
    anchors.right: parent.right
    anchors.left: parent.left
    anchors.top: prev.bottom
    margin-top: 3
    margin-bottom: 2

  Button
    id: closeButton
    text: Cerrar
    font: cipsoftFont
    anchors.left: parent.left
    anchors.bottom: parent.bottom
    size: 100 22
]])

local panelName = "Girar a"
if not storage[panelName] then
  storage[panelName] = {
    enabled = false,
  }
end

local config = storage[panelName]

rootWidget = g_ui.getRootWidget()
if rootWidget then
  local actionWindow = UI.createWindow('ActionWindow', rootWidget)
  actionWindow:hide()

  actionUI.editPlayerList.onClick = function(widget)
    actionWindow:show()
    actionWindow:raise()
    actionWindow:focus()
  end

  actionWindow.closeButton.onClick = function(widget)
    actionWindow:hide()
  end

  -- Funciones para girar en diferentes direcciones
  local function turnNorth()
    turn(0)  -- Girar al Norte
  end

  local function turnEast()
    turn(1)  -- Girar al Este
  end

  local function turnSouth()
    turn(2)  -- Girar al Sur
  end

  local function turnWest()
    turn(3)  -- Girar al Oeste
  end

  local northButton = actionWindow:recursiveGetChildById('northButton')
  northButton.onClick = turnNorth

  local eastButton = actionWindow:recursiveGetChildById('eastButton')
  eastButton.onClick = turnEast

  local southButton = actionWindow:recursiveGetChildById('southButton')
  southButton.onClick = turnSouth

  local westButton = actionWindow:recursiveGetChildById('westButton')
  westButton.onClick = turnWest
end
UI.Separator()
UI.Label("Spy Up F11 & Down F12")
local keyUp = "F11" -- aki pones con que tecla espias para arriba 
local keyDown = "F12" -- aki pones con que tecla espias para abajo 

-- script
local lockedLevel = pos().z
local m = macro(1000, "Spy Level", function() end)

onPlayerPositionChange(function(newPos, oldPos)
    if oldPos.z ~= newPos.z then
        lockedLevel = pos().z
        modules.game_interface.getMapPanel():unlockVisibleFloor()
    end
end)

onKeyPress(function(keys)
    if m.isOn() then
        if keys == keyDown then
            lockedLevel = lockedLevel + 1
            modules.game_interface.getMapPanel():lockVisibleFloor(lockedLevel)
        elseif keys == keyUp then
            lockedLevel = lockedLevel - 1
            modules.game_interface.getMapPanel():lockVisibleFloor(lockedLevel)
        end
    end
end)

-- Seguir Amigo
storage.followLeader = storage.followLeader or "Player a Seguir"
FollowMacro = macro(1231321321, "Seguir Amigo", function() end)
addTextEdit("playerToFollow", storage.followLeader, function(widget, text)
    storage.followLeader = text
end)

onCreaturePositionChange(function(creature, newPos, oldPos)
    if FollowMacro:isOff() then return end
    if newPos and oldPos and creature:getName() == player:getName() and getCreatureByName(storage.followLeader) == nil and newPos.z > oldPos.z then
        print("Subir")
        say('exani tera')
        for i = -1, 1 do
            for j = -1, 1 do
                local useTile = g_map.getTile({ x = posx() + i, y = posy() + j, z = posz() })
                if useTile then
                    g_game.use(useTile:getTopUseThing())
                end
            end
        end
    end

    if creature:getName() == storage.followLeader then
        if not newPos then
            if oldPos then
                lastPos = oldPos
                schedule(200, function()
                    autoWalk(oldPos)
                end)
            end
            schedule(1000, function()
                for i = -1, 1 do
                    for j = -1, 1 do
                        local useTile = g_map.getTile({ x = posx() + i, y = posy() + j, z = posz() })
                        if useTile then
                            local top = useTile:getTopUseThing()
                            if top then
                                g_game.use(top)
                            end
                        end
                    end
                end
            end)
        end

        if not newPos or not oldPos then return end
        if oldPos.z == newPos.z then
            schedule(300, function()
                local useTile = g_map.getTile({ x = oldPos.x, y = oldPos.y, z = oldPos.z })
                if useTile then
                    topThing = useTile:getTopThing()
                    if not useTile:isWalkable() then
                        use(topThing)
                    end
                end
            end)
            autoWalk({ x = oldPos.x, y = oldPos.y, z = oldPos.z })
        else
            lastPos = oldPos
            autoWalk(oldPos)
            for i = 1, 6 do
                schedule(i * 200, function()
                    autoWalk(oldPos)
                    if getDistanceBetween(pos(), oldPos) == 0 then
                        if posz() < newPos.z then
                            print("Bajar")
                            say("exani hur down")
                        elseif posz() > newPos.z then
                            print("Subir")
                            say("exani tera")
                            say("exani hur up")
                        end
                    end
                end)
            end
            local useTile = g_map.getTile({ x = newPos.x, y = newPos.y - 1, z = oldPos.z })
            if useTile then
                g_game.use(useTile:getTopUseThing())
            end
        end
    end
end)

-- Auto Dar Party
local palavraChave = storage.palavraChave or "lider party"

UI.Label("Palabra Clave Party:")
local palavraChaveInput = UI.TextEdit(palavraChave)
palavraChaveInput.onTextChange = function(widget, text)
    palavraChave = text
    storage.palavraChave = palavraChave
end

-- Macro 
local autoParty = macro(10000, "Auto Dar Party", function() end)

-- funcion
onTalk(function(name, level, mode, text, channelId, pos)
    if autoParty:isOff() then return end
    if player:getShield() == 4 then 
        g_game.partyShareExperience(not player:isPartySharedExperienceActive())
    end
    if name == player:getName() then return end
    if mode ~= 1 then return end
    if string.find(text, palavraChave) then
        local friend = getPlayerByName(name)
        g_game.partyInvite(friend:getId())
    end
end)

macro(1000, "Autoacepta Party",function() 
  if player:getShield() > 2 then return end -- already in a party
  for s, spec in pairs(getSpectators(false)) do
    if spec:getShield() == 1 then
      g_game.partyJoin(spec:getId())
      delay(1000)
    end
  end
end)

-- Invited guild
local config = {
    guildEmblem = 1,
    maxDist = 5,
    multifloor = true,
    whiteBlueShield = 2
}
 
macro(200,"Invited Party Guild",function()
    for _, spec in ipairs(getSpectators(config.multifloor)) do
        if spec:isPlayer() and
        spec ~= g_game.getLocalPlayer() and 
        spec:getEmblem() == config.guildEmblem and
        not spec:isPartyMember() and
        spec:getShield() ~= config.whiteBlueShield and
        getDistanceBetween(spec:getPosition(), pos()) <= config.maxDist then
            g_game.partyInvite(spec:getId())
            break
        end
    end
end)

macro(1000, "Curar Curse / Exana Morta", function ()

  if isCursed() then
      say("exana morta")
  end
  return "retry"
end)

macro(2500,"Curar Condiciones", function ()

  if isPoisioned() then
      say("exana pox")
  end
  if isBleeding() then
      say("exana kor")
 end
 if isBurning() then
      say("exana flam")
 end
  if isCursed() then
      say("exana morta")
  end
  if isEnergized() then
      say("exana vis")
  end
  return "retry"
end)

-- Alejar de players
macro(500, "Alejar De Players", function()
  if not CaveBot.isOn() then return end

  if getMonsters(2) > 5 then
    TargetBot.setOn()
  else
    if getPlayers(6) ~= 0 then
      TargetBot.setOff()
    else
      TargetBot.setOn()
    end
  end
end)

-- Abrir la siguiente bp si esta esta vacia
macro(1000, "Open Next BP Si Esta Vacia", function()
  for _, c in pairs(getContainers()) do
    if #c:getItems() == 1 then
      local nextC = c:getItems()[1]
      if nextC and nextC:isContainer() then
        g_game.open(nextC)
        return g_game.close(c)
      end
    end
  end
end)

-- Rainbow Nice
local config = {
  speed = 100
}

local s = {}

s.color = {
  first = 77, --min: 1
  last = 94,  --max: 133
  sets = {}
}
s.parts = {"head", "body", "legs", "feet"}
s.setIndex = 1

for i = s.color.first, s.color.last - 3 do
  local set = {}
  
  for j = i, i + 3 do
    table.insert(set, j)
  end

  table.insert(s.color.sets, set)
end

macro(config.speed, "Rainbow Outfit",  function()
  s.playerOutfit = player:getOutfit()

  if s.setIndex > #s.color.sets then
    s.setIndex = 1
  end

  local currentSet = s.color.sets[s.setIndex]

  for i, part in ipairs(s.parts) do
    s.playerOutfit[part] = currentSet[i]
  end

  player:setOutfit(s.playerOutfit)
  
  s.setIndex = s.setIndex + 1
end)

-- Rainbow arcoirirs
local function applyShader()
  g_game.getLocalPlayer():setOutfitShader("outfit_rainbow")
end

local function removeShader()
  g_game.getLocalPlayer():setOutfitShader("")
end

local m_main = macro(200, "Rainbow Arcoiris", function(m)
  applyShader()
  schedule(200, function()
    if m.isOff() then
      removeShader()
    end
  end)
end)

onPlayerPositionChange(function(old, new)
  if m_main.isOff() then return end
  if old and new and old.z ~= new.z then
      applyShader()
  end
end)

--- Camina y cambia outfit
local s = {}

s.color = {
  first = 77, --min: 1
  last = 94,  --max: 133
  sets = {}
}
s.parts = {"head", "body", "legs", "feet"}
s.setIndex = 1

for i = s.color.first, s.color.last - 3 do
  local set = {}
  
  for j = i, i + 3 do
    table.insert(set, j)
  end

  table.insert(s.color.sets, set)
end

s.m_main = macro(10000, "Camina & Color", function(m) end)

onPlayerPositionChange(function(newPos, oldPos)
  if s.m_main.isOff() then return end

  s.playerOutfit = player:getOutfit()

  if s.setIndex > #s.color.sets then
    s.setIndex = 1
  end

  local currentSet = s.color.sets[s.setIndex]

  for i, part in ipairs(s.parts) do
    s.playerOutfit[part] = currentSet[i]
  end

  setOutfit(s.playerOutfit)
  
  s.setIndex = s.setIndex + 1
end)

-- Abrir Bp Principal
local function openFromEmpty()
  containers = getContainers()
  if #containers < 1 and containers[0] == nil then
    bpItem = getBack()
    if bpItem ~= nil then
      g_game.open(bpItem)
    end
  end
end

openFromEmpty()
macro(500,"Abrir Bp Principal", function()
  containers = getContainers()
  if #containers < 1 and containers[0] == nil then
    openFromEmpty()
    return
  end
end)

-- Cortar ramas

local config = {
  machete = 3308,
  hotkey = "F8",
  WGWallId = 2130
}

function getNearTiles(pos)
  if type(pos) ~= "table" then pos = pos:getPosition() end

  local tiles = {}
  local dirs = {
      {-1, 1}, {0, 1}, {1, 1}, {-1, 0}, {1, 0}, {-1, -1}, {0, -1}, {1, -1}
  }
  for i = 1, #dirs do
      local tile = g_map.getTile({
          x = pos.x - dirs[i][1],
          y = pos.y - dirs[i][2],
          z = pos.z
      })
      if tile then table.insert(tiles, tile) end
  end

  return tiles
end

local Machete = macro(200, "Cortar ramas", function()
  for _, t in ipairs(getNearTiles(pos())) do
    local topT = t:getTopThing()
    if topT and topT:getId() == config.WGWallId then
      return useWith(config.machete, topT)
    end
  end
end)

-- Crear Food
macro(500, "Crear Food", function()
        if player:getRegenerationTime() <= 400 then
            cast("exevo pan")
    end
end)

-- Eat Food
local Falcon = "Eat Food"
local items = {7158,3578,3725,3577,3600,3731,3582,3726}
local wait = 1 -- minutes
 
macro(5000, "Eat Food", function()
  local time = 0
  for i=1,#items do
    local id = items[i]
    if findItem(id) then
      schedule(time,function()
        g_game.use(findItem(id))
      end)
      time = time + 250
    end
  end
  delay((wait*60*1000))
end)

-- Full Addon
macro(100, "Full Addon", function()
    local myOutfit = player:getOutfit()
    if myOutfit.addons ~= 3 then
      myOutfit.addons = 3
      player:setOutfit(myOutfit)
    end
  end)

--- Mensaje De Afk
local privateModeId = 4
local message = "Hola %name!, mensajeame despues, estoy ocupado horita. (AFK) "


local m_main = macro(10000, "Auto Mensaje AFK", function() end)

onTalk(function(name, level, mode, text, channelId, pos)
  if m_main.isOff() then return end
  text = text:lower()
  if text:find("afk") then return end

  if mode == privateModeId then
    local mens = message:gsub("%%name", name)
    talkPrivate(name, mens)
  end
end)

-- STAR CONFIG AUTOPESCA
local fishable_water_ids = {4597, 4598, 4599, 4600, 4601, 4602}
local fishing_rod_id = 3483
local maxDistance = 8
local minCapacity = -1 -- -1 = don't stop if low cap
local wormId = 3492 -- leave it = 0 if you dont need worm to fish
local interval = 500 -- milliseconds
local markFishable = true
local markColor = "white"
-- END CONFIG

local useAsHotkey = g_game.getClientVersion() > 800

local fishMacro = macro(250, "Pesca Automatica", function(m)
  local rod = useAsHotkey and fishing_rod_id or findItem(fishing_rod_id)
  if not rod then
    warn("[Fishing] No Tienes La Fishing Rod.")
    return delay(5000)
  end
  if freecap() <= minCapacity then
    warn("[Fishing] No Tienes Mas Capacidad.")
    return delay(5000)
  end
  if wormId > 0 and itemAmount(wormId) == 0 then
    warn("[Fishing] No Tienes Gusanos.")
    return delay(5000)
  end

  local fishable = {}
  local time = 0

  for _, tile in ipairs(g_map.getTiles(posz())) do
    local isFishable = table.contains(fishable_water_ids, tile:getTopUseThing():getId())
    local isReachable = getDistanceBetween(pos(), tile:getPosition()) <= maxDistance
    if isFishable and isReachable and tile:canShoot() then
      table.insert(fishable,tile:getPosition())
      if markFishable then
        tile:getTopUseThing():setMarked(markColor)
      end
    end
  end

  if #fishable == 0 then
    warn("[Fishing] No Hay Mas Peces Aqui.")
    return delay(5000)
  end

  for p, pos in pairs(fishable) do
    schedule(time,function()
      if m:isOff() then return end
      local tile = g_map.getTile(pos)
      if tile then
        useWith(rod,tile:getTopUseThing())
      end
    end)
    time = time + interval
  end
  
  delay(time+interval)
end) 

fishMacro.switch:setColor("white")
fishMacro.switch:setFont('verdana-11px-rounded')

-- Esperar amigos en Party
local waitIfNotFound = false -- esperar si amigo no esta en pantalla 
local onlyParty = true -- solo espera quien esta en party
-- STORAGE
storage.waitFriends = storage.waitFriends or {dist = 5, text = ""}
local config = storage.waitFriends
local friends = {}
-- PARSE FRIENDS TEXT TO TABLE
local function parseFriendList()
  friends = {}
  for _, friend in pairs(config.text:split("\n")) do
    table.insert(friends,friend)
  end
end
parseFriendList()

-- MACRO
local paused = false
macro(250,"Esperar Amigos",function()
  local p = pos()
  for f, friend in pairs(friends) do
    local find = getCreatureByName(friend)
    if (not find and waitIfNotFound) or (find and (not onlyParty or find:getShield() > 2) and getDistanceBetween(p,find:getPosition()) > config.dist) then
      if not paused then
        paused = true
        delay(1000) -- tempo que vai ficar parado até começar a andar pros lados
        return CaveBot.setOff()
      else
        local wait = 0
        local step = 250 -- intervalo de cada passo
        for i = 0, 3 do
          schedule(wait,function()
            walk(i)
            schedule(wait+step,function()
              walk((i + 2) % 4)
            end)
          end)
          wait = wait + step + step
        end
        wait = wait + step
        delay(wait)
        return
      end
    end
  end
  if paused then
    paused = false
    CaveBot.setOn()
  end
end)

-- UI
UI.Label("Distance:")
addTextEdit("wfDist", config.dist, function(widget, text)
  config.dist = tonumber(text)
end)
UI.Button("Editar List Amigos", function(newText)
  UI.MultilineEditorWindow(config.text or "", {title="Wait Friends List", description="Insert 1 friend in each line"},
  function(text)
    config.text = text
    parseFriendList()
  end)
end)

-- macro para ignorar ciertos IDs del mapa By F.Almeida

local replace_id = 2110
local mark_color = "red"
if not storage.avoid_items or type(storage.avoid_items) ~= "table" then
  storage.avoid_items = {2147,2145,2148,2146}
end

local avoidMacro = macro(10*60*1000,"Evitar Trampas o Ids",function()
end)

local function parseItems(items)
  local parse = {}
  for e, entry in pairs(items) do
    local id = type(entry) == 'table' and entry.id or entry
    table.insert(parse,id)
  end
  return parse
end

local avoidContainer = UI.Container(function(widget, items)
  storage.avoid_items = parseItems(items)
end, true)
avoidContainer:setHeight(35)
avoidContainer:setItems(parseItems(storage.avoid_items))

onAddThing(function(tile, thing)
  if not avoidMacro:isOn() then return end
  if thing:isItem() then
    if not isOnTile(replace_id,tile) then
      local oldId = thing:getId()
      if table.find(storage.avoid_items,oldId) then
        local item = thing
        if thing:isGround() then
          local create = Item.create()
          tile:addThing(create,1)
          item = create
        end
        item:setId(replace_id)
        item:setMarked(mark_color)
      end
    end
  end
end)
UI.Separator()

-- Antipush panel
local ui = setupUI([[
Panel
  height: 19

  BotSwitch
    id: title
    anchors.top: parent.top
    anchors.left: parent.left
    text-align: center
    width: 130
    !text: tr('Anti-Push Dejar On')

  Button
    id: edit
    anchors.top: prev.top
    anchors.left: prev.right
    anchors.right: parent.right
    margin-left: 3
    height: 17
    text: Edit
]])

local edit = setupUI([[
Panel
  height: 90
    
  Label
    anchors.top: parent.top
    anchors.left: parent.left
    anchors.right: parent.right
    margin-top: 5
    text-align: center
    text: Stack Items:

  BotContainer
    id: pushItems
    anchors.top: prev.bottom
    anchors.left: parent.left
    anchors.right: parent.right
    height: 65
]])
edit:hide()

if not storage.antiPush then
    storage.antiPush = {
      enabled = false,
      pushItems = { 3031, 3447, 3492 },
    }
end

local config = storage.antiPush

local showEdit = false
ui.edit.onClick = function(widget)
  showEdit = not showEdit
  if showEdit then
    edit:show()
  else
    edit:hide()
  end
end

ui.title:setOn(config.enabled)
ui.title.onClick = function(widget)
  config.enabled = not config.enabled
  ui.title:setOn(config.enabled)
  antiPushIcon:setOn(config.enabled) -- Sincroniza el ícono con el estado del BotSwitch
end

UI.Container(function()
    config.pushItems = edit.pushItems:getItems()
end, true, nil, edit.pushItems) 
edit.pushItems:setItems(config.pushItems)

local antiPusho = macro(500, function()
  if not config.enabled then return end

  local pos = player:getPosition()
  local tile = g_map.getTile(pos)

  if #tile:getItems() > 7 then return true end

  local topItem = tile:getTopUseThing():getId()

  for i, item in pairs(config.pushItems) do
    local drop = findItem(item.id)
    if drop and item.id ~= topItem then
      return g_game.move(drop,pos,math.random(1, 2))
    end
  end
end)

-- creando icono
local function activeDrag(icon, nameMacro, position)
  icon:breakAnchors()
  icon:move(position.posX or 20, position.posY or 20)

  local dobleclick = false
  icon.onDoubleClick = function()
    dobleclick = true
    schedule(1500, function()
      dobleclick = false
    end)
  end

  icon.onDragEnter = function(widget, mousePos)
    if not dobleclick and not g_keyboard.isKeyPressed("F1") then
      return false
    end
    icon:breakAnchors()
    icon.movingReference = { x = mousePos.x - icon:getX(), y = mousePos.y - icon:getY() }
    dobleclick = false
    return true
  end

  icon.onDragMove = function(widget, mousePos, moved)
    local parentRect = widget:getParent():getRect()
    local x = math.min(math.max(0,mousePos.x - widget.movingReference.x), parentRect.x + parentRect.width - widget:getWidth())
    local y = math.min(math.max(0,mousePos.y - widget.movingReference.y), parentRect.y + parentRect.height - widget:getHeight())
    widget:move(x, y)
    icon.moving = { x = icon:getX(), y = icon:getY() }
    return true
  end

  icon.onDragLeave = function(widget, pos)
    storage[nameMacro] = { posX = icon.moving.x, posY = icon.moving.y }
  end
end

local antiPushoIcon = addIcon("antipusho", {item = 10818, text = "Anti Push", switchable = true, moveable = true}, function(icon, isOn)
  antiPusho.setOn(isOn)
end)

antiPushoIcon.text:setFont('verdana-11px-rounded')

activeDrag(antiPushoIcon, 'antiPusho', storage.antiPusho or {})

-- Pickup levanta items del suelo 
local ui = setupUI([[
Panel
  height: 19

  BotSwitch
    id: title
    anchors.top: parent.top
    anchors.left: parent.left
    text-align: center
    width: 140
    !text: tr('Free Items / Bag Loot')

  Button
    id: edit
    anchors.top: prev.top
    anchors.left: prev.right
    anchors.right: parent.right
    margin-left: 3
    height: 17
    text: Edit
]])

local edit = setupUI([[
Panel
  height: 255

  Label
    anchors.top: parent.top
    anchors.left: parent.left
    margin-top: 5
    text-align: center
    width: 120
    text: Max Distance:
    height: 17

  SpinBox
    id: maxPos
    height: 17
    anchors.top: prev.top
    anchors.left: prev.right
    anchors.right: parent.right
    margin-left: 3
    minimum: 1
    maximum: 5
    step: 1
    editable: true
    text-align: center

  Label
    anchors.top: prev.bottom
    margin-top: 5
    anchors.left: parent.left
    margin-top: 5
    text-align: center
    width: 120
    text: Min Capacity:
    height: 17

  BotTextEdit
    id: minCap
    height: 17
    anchors.top: prev.top
    anchors.left: prev.right
    anchors.right: parent.right
    margin-left: 3
    editable: true
    text-align: center
    text: 0.1

  Label
    anchors.top: prev.bottom
    margin-top: 5
    anchors.left: parent.left
    margin-top: 5
    text-align: center
    width: 120
    text: Move Delay:
    height: 17

  BotTextEdit
    id: moveDelay
    height: 17
    anchors.top: prev.top
    anchors.left: prev.right
    anchors.right: parent.right
    margin-left: 3
    editable: true
    text-align: center
    text: 0.1
    
  Label
    anchors.top: prev.bottom
    anchors.left: parent.left
    anchors.right: parent.right
    margin-top: 5
    text-align: center
    text: Items to Pick Up:

  BotContainer
    id: freeItems
    anchors.top: prev.bottom
    anchors.left: parent.left
    anchors.right: parent.right
    height: 35

  Label
    anchors.top: prev.bottom
    margin-top: 5
    anchors.left: parent.left
    anchors.right: parent.right
    text-align: center
    text: Containers to Fill:

  BotContainer
    id: freeContainers
    anchors.top: prev.bottom
    anchors.left: parent.left
    anchors.right: parent.right
    height: 35

  BotSwitch
    id: moveBag
    anchors.top: prev.bottom
    anchors.left: parent.left
    anchors.right: parent.right
    height: 17
    text: Move Bag Loot
    tooltip: Auto move container to your feet    
  
  BotSwitch
    id: openNext
    anchors.top: prev.bottom
    anchors.left: parent.left
    anchors.right: parent.right
    height: 17
    text: Open Next Container
    tooltip: Auto open next container if container is full

  BotSwitch
    id: reopen
    anchors.top: prev.bottom
    anchors.left: parent.left
    anchors.right: parent.right
    height: 17
    text: ReOpen Container
    tooltip: Auto re-open container if its not opened yet

  BotSwitch
    id: moveTrash
    anchors.top: prev.bottom
    anchors.left: parent.left
    anchors.right: parent.right
    height: 17
    text: Throw Trash Away
    tooltip: Auto move trash away to continue looting

  BotSwitch
    id: moveOne
    anchors.top: prev.bottom
    anchors.left: parent.left
    anchors.right: parent.right
    height: 17
    text: Slow Move Items
    tooltip: Turn it on if you are having problems with the moving speed
]])
edit:hide()

if not storage.freeLoot then
    storage.freeLoot = {
      enabled = false,
      maxPos = 1,
      minCap = "0.1",
      moveDelay = "300",
      openNext = true,
      moveBag = true,
      moveTrash = true,
      moveOne = false,
      reopen = true,
      freeItems = { 3031, 3035, 3043 },
      freeContainers = {}
    }
end

local config = storage.freeLoot
config.moveDelay = config.moveDelay or "300"

local showEdit = false
ui.edit.onClick = function(widget)
  showEdit = not showEdit
  if showEdit then
    edit:show()
  else
    edit:hide()
  end
end

ui.title:setOn(config.enabled)
ui.title.onClick = function(widget)
  config.enabled = not config.enabled
  ui.title:setOn(config.enabled)
end

edit.openNext:setOn(config.openNext)
edit.openNext.onClick = function(widget)
  config.openNext = not config.openNext
  edit.openNext:setOn(config.openNext)
end

edit.reopen:setOn(config.reopen)
edit.reopen.onClick = function(widget)
  config.reopen = not config.reopen
  edit.reopen:setOn(config.reopen)
end

edit.moveBag:setOn(config.moveBag)
edit.moveBag.onClick = function(widget)
  config.moveBag = not config.moveBag
  edit.moveBag:setOn(config.moveBag)
end

edit.moveTrash:setOn(config.moveTrash)
edit.moveTrash.onClick = function(widget)
  config.moveTrash = not config.moveTrash
  edit.moveTrash:setOn(config.moveTrash)
end

edit.moveOne:setOn(config.moveOne)
edit.moveOne.onClick = function(widget)
  config.moveOne = not config.moveOne
  edit.moveOne:setOn(config.moveOne)
end

edit.maxPos:setValue(config.maxPos)
edit.maxPos.onValueChange = function(widget, value)
  config.maxPos = value
end

edit.minCap:setText(config.minCap)
edit.minCap.onTextChange = function(widget, text)
  config.minCap = text
end

edit.moveDelay:setText(config.moveDelay)
edit.moveDelay.onTextChange = function(widget, text)
  config.moveDelay = text
end

local function properTable(t)
  local r = {}
  if #t == 0 then return r end
  for _, entry in pairs(t) do
    if type(entry) == 'number' then
      table.insert(r, entry)
    else
      table.insert(r, entry.id)
    end
  end
  return r
end

UI.Container(function()
  config.freeItems = properTable(edit.freeItems:getItems())
end, true, nil, edit.freeItems) 
edit.freeItems:setItems(config.freeItems)
config.freeItems = properTable(edit.freeItems:getItems())

UI.Container(function()
  config.freeContainers = properTable(edit.freeContainers:getItems())
end, true, nil, edit.freeContainers) 
edit.freeContainers:setItems(config.freeContainers)
config.freeContainers = properTable(edit.freeContainers:getItems())

local delay = now

-- check destination and reopen container
-- "open next container" "auto reopen"
local dest = nil
macro(100,function()
  if not config.enabled or dest or delay > now then return end

  if #config.freeContainers < 1 then
    warn("[FreeItems]: You must set up\ncontainers to pick up items.")
    delay = now + 5000
    return
  end

  -- search for a destination in opened containers
  local containers = g_game.getContainers()
  for _, cont in pairs(containers) do
    local cName = cont:getName():lower()
    if table.find(config.freeContainers, cont:getContainerItem():getId()) then
      if cont:getCapacity() > #cont:getItems() then
        dest = cont
        return
        -- container is full, open next?
      elseif config.openNext then
        for i, item in pairs(cont:getItems()) do
          if item:isContainer() and (not config.freeContainers[1] or table.contains(config.freeContainers, item:getId())) then 
            g_game.open(item, cont)
            -- delay = now + exhausted
            return
          end
        end
      end
    end
  end

  -- no destination yet? should look on ground?
  if not dest and config.reopen and config.freeContainers[1] then 
    local tile = g_map.getTile(player:getPosition())
    if tile then 
      local things = tile:getThings()
      for t, thing in pairs(things) do
        if table.find(config.freeContainers,thing:getId()) then
          delay = now + tonumber(config.moveDelay)
          g_game.open(thing)
          return
        end
      end
    end
  end
  
end)

-- main function
macro(50, function()
  if not config.enabled or delay > now or TargetBot.isActive() then return end
  local exhausted = tonumber(config.moveDelay)

  -- check capacity
  if freecap() < tonumber(config.minCap) then return end

  -- wait for destination
  if not dest then return end

  -- ok, lets check around
  for x = -config.maxPos, config.maxPos do
    for y = -config.maxPos, config.maxPos do
      local pos = player:getPosition()
      local tile = g_map.getTile({x = pos.x + x, y = pos.y + y, z = pos.z})
      if tile and (x ~= 0 or y ~= 0) then
        local things = tile:getThings()
        for _, item in ipairs(things) do
          if not item:isNotMoveable() and not item:isCreature() then
            if table.find(config.freeItems, item:getId()) then
              local cap = dest:getCapacity()
              g_game.move(item,dest:getSlotPosition(cap),item:getCount())
              -- dest is full (or almost), lets break and search for another one
              if #dest:getItems() >= (cap-1) then dest = nil return end
              -- Move One Item per time
              delay = now + exhausted
              if config.moveOne then return end
            elseif table.find(config.freeContainers,item:getId()) then
              -- this container should be in your feet ^.- just break and wait
              delay = now + exhausted
              return
              --move trash?
            elseif config.moveTrash and (math.abs(x) == 1 or math.abs(y) == 1) then
              local trashTile = nil
              local d = item:isStackable() and 4 or 2
              for xp = -d,d do
                for yp = -d,d do
                  if math.abs(yp) > 1 or math.abs(xp) > 1 then
                    trashTile = g_map.getTile({x = pos.x + xp, y = pos.y + yp, z = pos.z})
                    if trashTile and not trashTile:isHouseTile() and trashTile:isWalkable() then
                      local trashPos = trashTile:getPosition()
                      local tilePos = tile:getPosition()
                      if findPath(trashPos,tilePos, 7, { ignoreNonPathable = true, precision = 1 }) and g_map.isSightClear(tilePos,trashPos) then
                        return g_game.move(item,trashPos,item:getCount())
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    end
  end
end)

-- for compat
local function getNear(pos)
  if type(pos) ~= "table" then pos = pos:getPosition() end

  local tiles = {}
  local dirs = {
      {-1, 1}, {0, 1}, {1, 1}, {-1, 0}, {1, 0}, {-1, -1}, {0, -1}, {1, -1}
  }
  for i = 1, #dirs do
      local tile = g_map.getTile({
          x = pos.x - dirs[i][1],
          y = pos.y - dirs[i][2],
          z = pos.z
      })
      if tile then table.insert(tiles, tile) end
  end

  return tiles
end

-- auto move container on ground
onPlayerPositionChange(function(newPos, oldPos)
  if not config.enabled then return true end
  dest = nil
  if not config.moveBag then return true end

  local max = config.maxPos
  local tiles = getNear(newPos)

  for t, tile in pairs(tiles) do
    if tile then
      local items = tile:getItems()
      for i, item in pairs(items) do
        if table.find(config.freeContainers,item:getId()) then
          g_game.move(item,newPos)
          return true
        end
      end
    end
  end
end)

local function activeDrag(icon, nameMacro, position)
  icon:breakAnchors()
  icon:move(position.posX or 20, position.posY or 20)

  local dobleclick = false
  icon.onDoubleClick = function()
    dobleclick = true
    schedule(1500, function()
      dobleclick = false
    end)
  end

  icon.onDragEnter = function(widget, mousePos)
    if not dobleclick and not g_keyboard.isKeyPressed("F1") then
      return false
    end
    icon:breakAnchors()
    icon.movingReference = { x = mousePos.x - icon:getX(), y = mousePos.y - icon:getY() }
    dobleclick = false
    return true
  end

  icon.onDragMove = function(widget, mousePos, moved)
    local parentRect = widget:getParent():getRect()
    local x = math.min(math.max(0,mousePos.x - widget.movingReference.x), parentRect.x + parentRect.width - widget:getWidth())
    local y = math.min(math.max(0,mousePos.y - widget.movingReference.y), parentRect.y + parentRect.height - widget:getHeight())
    widget:move(x, y)
    icon.moving = { x = icon:getX(), y = icon:getY() }
    return true
  end

  icon.onDragLeave = function(widget, pos)
    storage[nameMacro] = { posX = icon.moving.x, posY = icon.moving.y }
  end
end

local pickupIcon = addIcon("recoger" ,{item=2478, text="Pickup" , switchable=true},function(w, isOn)
 config.enabled = isOn
 ui.title:setOn(config.enabled)
end)

pickupIcon.text:setFont('verdana-11px-rounded')

activeDrag(pickupIcon, 'pickup', storage.pickup or {})
